head	1.46;
access;
symbols;
locks;
comment	@# @;


1.46
date	2014.05.13.07.31.56;	author -;	state -;
branches;
next	1.45;

1.45
date	2014.05.13.07.22.48;	author -;	state -;
branches;
next	1.44;

1.44
date	2014.05.13.06.34.03;	author -;	state -;
branches;
next	1.43;

1.43
date	2014.05.13.06.32.51;	author -;	state -;
branches;
next	1.42;

1.42
date	2014.05.13.06.32.36;	author -;	state -;
branches;
next	1.41;

1.41
date	2014.05.13.06.32.16;	author -;	state -;
branches;
next	1.40;

1.40
date	2014.05.13.06.31.48;	author -;	state -;
branches;
next	1.39;

1.39
date	2014.05.13.06.21.11;	author -;	state -;
branches;
next	1.38;

1.38
date	2014.05.13.06.20.39;	author -;	state -;
branches;
next	1.37;

1.37
date	2014.05.13.06.18.51;	author -;	state -;
branches;
next	1.36;

1.36
date	2014.05.13.06.05.58;	author -;	state -;
branches;
next	1.35;

1.35
date	2014.05.13.06.05.34;	author -;	state -;
branches;
next	1.34;

1.34
date	2014.05.13.06.02.55;	author -;	state -;
branches;
next	1.33;

1.33
date	2014.05.13.05.59.52;	author -;	state -;
branches;
next	1.32;

1.32
date	2014.05.13.05.59.41;	author -;	state -;
branches;
next	1.31;

1.31
date	2014.05.13.05.51.20;	author -;	state -;
branches;
next	1.30;

1.30
date	2014.05.13.04.48.19;	author -;	state -;
branches;
next	1.29;

1.29
date	2014.05.13.04.44.25;	author -;	state -;
branches;
next	1.28;

1.28
date	2014.05.13.04.36.03;	author -;	state -;
branches;
next	1.27;

1.27
date	2014.05.13.04.35.48;	author -;	state -;
branches;
next	1.26;

1.26
date	2014.05.13.04.07.32;	author -;	state -;
branches;
next	1.25;

1.25
date	2014.05.13.04.06.19;	author -;	state -;
branches;
next	1.24;

1.24
date	2014.05.13.04.06.05;	author -;	state -;
branches;
next	1.23;

1.23
date	2014.05.13.04.02.53;	author -;	state -;
branches;
next	1.22;

1.22
date	2014.05.13.03.58.42;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.05.13.03.37.18;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.05.13.02.50.56;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.05.13.02.21.21;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.05.13.02.17.47;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.05.13.02.04.04;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.05.13.02.03.50;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.05.12.20.21.15;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.05.12.20.18.21;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.05.12.20.18.01;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.05.12.20.17.25;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.05.12.20.16.42;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.05.12.20.16.16;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.05.12.20.15.21;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.12.20.13.17;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.12.19.57.20;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.12.19.57.00;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.12.19.56.47;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.12.19.56.00;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.12.19.55.47;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.12.19.55.16;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.12.18.09.14;	author -;	state -;
branches;
next	;


desc
@@


1.46
log
@-
@
text
@// $Id: treemap.java,v 1.45 2014-05-13 00:22:48-07 - - $
// Ryan Brounley -- rbrounle

import static java.lang.System.*;
import java.util.*;
import java.util.Scanner;

class treemap <key_t extends Comparable <key_t>, value_t> {

   private class node {
      key_t key;
      value_t value;
      node left;
      node right;
   }
   private node root = new node();

   private void debug_dump_rec (node tree, int depth) {
          if (tree == null){ return;}
          if (tree.left != null)   debug_dump_rec(tree.left, depth++);
              for (int i = 0; i < depth; i++){ 
                  out.printf("  "); }
                  String queuestring = tree.value.toString(); 
              out.printf("%d %s %s\n", depth, tree.key, queuestring);
          if(tree.right != null) debug_dump_rec(tree.right, depth++); 
   }      

   private void do_visit_rec (visitor <key_t, value_t> visit_fn,
                              node tree) {
          if (tree == null){ return;}
          if (tree != null){
              do_visit_rec(visit_fn, tree.left);
              out.printf("DEBUG");
              visit_fn.visit(tree.key, tree.value);
              do_visit_rec(visit_fn, tree.right);
   }
   }

   public value_t get (key_t key) {
        if(root.key == null) return null;
        node curr = root;
        while(curr != null){
           int tmp = curr.key.compareTo(key);
           if (tmp == 0) return curr.value;
           if (tmp < 0) curr = curr.right;
              else      curr = curr.left;
      }
      return null;   
      }

   public value_t put (key_t key, value_t value){
         node curr = root;
         node prev = null;
         node child = new node();
         if (root.key == null){
              root.key = key;
              root.value = value;
              return root.value;}
         while(curr != null){
           int cmp = key.compareTo(curr.key);
           if (cmp == 0){
              value_t temp = curr.value;
              curr.value = value;
              return temp;}   
           else if (cmp < 0){
              prev = curr;
              curr = curr.left;
              }
           else if (cmp > 0){
              prev = curr;
              curr = curr.right;}
      }
      curr = prev;
      int cmp = key.compareTo(curr.key);
      child.key = key;
      child.value = value;
      if (cmp < 0){
          curr.left = child;
          return child.value;
      }
      else {
          curr.right = child;
          return child.value;}

}

   public void debug_dump () {
      debug_dump_rec (root, 0);
   }

   public void do_visit (visitor <key_t, value_t> visit_fn) {
      do_visit_rec (visit_fn, root);
   }
}
@


1.45
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.44 2014-05-12 23:34:03-07 - - $
d30 2
a31 2
          if (tree.key == null){ return;}
          if (tree.key != null){
d33 1
@


1.44
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.43 2014-05-12 23:32:51-07 - - $
d26 1
a26 1
}      
d30 1
a30 1
          if (tree.key == null){ return null;}
d35 2
a36 1
   }}
@


1.43
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.42 2014-05-12 23:32:36-07 - - $
d30 1
a30 1
          if (tree == null){ return;}
@


1.42
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.41 2014-05-12 23:32:16-07 - - $
d30 1
a30 1
          if (tree.key == null){ return;}
@


1.41
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.40 2014-05-12 23:31:48-07 - - $
d31 1
a31 1
          if (tree != null){
@


1.40
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.39 2014-05-12 23:21:11-07 - - $
d30 1
a30 1
          if (tree.value == null){ return;}
@


1.39
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.38 2014-05-12 23:20:39-07 - - $
d30 1
a30 1
          if (tree == null){ return;}
@


1.38
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.37 2014-05-12 23:18:51-07 - - $
d31 1
d35 1
a35 1
   }
@


1.37
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.36 2014-05-12 23:05:58-07 - - $
d30 1
a30 1
          if (tree.key == null){ return;}
@


1.36
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.35 2014-05-12 23:05:34-07 - - $
d50 6
d57 2
a58 2
           int tmp = key.compareTo(curr.key);
           if (tmp == 0){
d62 6
a67 7
           if (tmp < 0){
              node rightchild  = new node ();
              curr.right       = rightchild;
              rightchild.key   = key;
              rightchild.value = value;
              rightchild.right = null;
              rightchild.left  = null;
a68 8
           else if (tmp > 0){
              node leftchild  = new node();
              curr.left       = leftchild;
              leftchild.key   = curr.key ; 
              leftchild.value = curr.value ;
              leftchild.left  = null;
              leftchild.right = null;
              curr = curr.left;}
d70 7
a76 1
      return null;
d78 5
@


1.35
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.34 2014-05-12 23:02:55-07 - - $
d51 1
a51 1
           int tmp = curr.key.compareTo(key);
@


1.34
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.33 2014-05-12 22:59:52-07 - - $
d62 2
a63 1
              rightchild.left  = null;}
d70 2
a71 1
              leftchild.right = null;}
@


1.33
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.32 2014-05-12 22:59:41-07 - - $
d37 1
@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.31 2014-05-12 22:51:20-07 - - $
d17 1
a17 1
`
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.30 2014-05-12 21:48:19-07 - - $
d16 2
a17 2
   private node root;

@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.29 2014-05-12 21:44:25-07 - - $
d20 1
a20 1
          if (tree.left !=null)   debug_dump_rec(tree.left, depth++);
d47 1
a47 4
   public value_t put (key_t key, value_t value) {
      //   boolean left;
      //   root.key = key;
      //   root.value = value;
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.28 2014-05-12 21:36:03-07 - - $
d20 1
a20 1
          if(tree.left !=null)   debug_dump_rec(tree.left, depth++);
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.27 2014-05-12 21:35:48-07 - - $
d23 2
a24 2
                 // String queuestring = tree.value.toString(); 
              out.printf("%d %s %s\n", depth, tree.key, tree.value);
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.26 2014-05-12 21:07:32-07 - - $
d26 1
a26 1
      
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.25 2014-05-12 21:06:19-07 - - $
d19 2
a20 2
          if (tree.key == null){ return;}
              debug_dump_rec(tree.left, depth++);
d23 4
a26 5
                  String queuestring = tree.value.toString(); 
                  out.printf("%d %s %s\n", depth, tree.key, queuestring);
              if (depth != 0){
                  debug_dump_rec(tree.right, depth++);} 
      }
d57 1
a57 2
              return temp;}
             
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.24 2014-05-12 21:06:05-07 - - $
d49 3
a51 3
         boolean left;
         root.key = key;
         root.value = value;
d59 2
a60 8
              /*root = curr;
                if (tmp > 0){
                  left = false;
                  curr = curr.right; }
                else if (tmp < 0){
                  left = true;
                  curr = curr.left; }
       */    if (tmp < 0){
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.23 2014-05-12 21:02:53-07 - - $
d81 1
a81 1
      }return null;
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.22 2014-05-12 20:58:42-07 - - $
d59 1
a59 1
              root = curr;
d66 1
a66 1
       /*    if (tmp < 0){
d69 2
a70 2
              rightchild.key   = curr.key;
              rightchild.value = curr.value;
d80 1
a80 1
      }*/
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.21 2014-05-12 20:37:18-07 - - $
a48 1
         node newspaces = new node();
d60 2
a61 2
                if (tmp < 0){
                  left = true;
d63 1
a63 1
                else if (tmp > 0){
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.20 2014-05-12 19:50:56-07 - - $
d49 2
d55 1
a55 1
           int tmp = key.compareTo(curr.key);
d57 11
a67 2
              return curr.value;}
           if (tmp < 0){
d81 2
a82 2
      }
      return null;
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.19 2014-05-12 19:21:21-07 - - $
d60 1
a60 1
              rightchild.value = curr.value ;
d63 1
a63 1
           else{
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.18 2014-05-12 19:17:47-07 - - $
a37 1
      try{
d46 1
a46 3
      }catch(UnsupportedOperationException error){}
             throw new UnsupportedOperationException ();
   }
d49 2
d53 1
a53 1
           int tmp = curr.key.compareTo(key);
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.17 2014-05-12 19:04:04-07 - - $
a18 1
      try{
a26 2
      }catch (UnsupportedOperationException error){
         throw new UnsupportedOperationException();} 
a81 1

@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.16 2014-05-12 19:03:50-07 - - $
a54 1
     try{
d74 3
a76 4
      }return null;
      }catch(UnsupportedOperationException error){  
              throw new UnsupportedOperationException ();}
     }
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.15 2014-05-12 13:21:15-07 - - $
d36 1
a36 1
              visit_fin.visit(tree.key, tree.value);
@


1.15
log
@-
@
text
@d1 2
a2 1
// $Id: treemap.java,v 1.14 2014-05-12 13:18:21-07 - - $
d20 1
a20 2
          tree = root;
          if (tree.key == null){return;}
d24 2
a25 2
                 // tree = tree.toString(); 
                  out.printf("%s %s %s\n", depth, tree.key, tree.value);
d27 1
a27 1
                  debug_dump_rec(tree.right, depth);} 
d34 4
a37 1
      throw new UnsupportedOperationException ();
d57 1
a57 1
        while(curr != null){
a59 1
            //  curr.
d77 2
a78 2
              throw new UnsupportedOperationException ();
     }}
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.13 2014-05-12 13:18:01-07 - - $
d63 3
a65 1
              rightchild.value = curr.value ;}
d70 4
a73 2
              leftchild.value = curr.value ;}}
       return null;
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.12 2014-05-12 13:17:25-07 - - $
d72 1
a72 1
     }
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.11 2014-05-12 13:16:42-07 - - $
d68 2
a69 2
              leftchild.value = curr.value ;}
       return null;}
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.10 2014-05-12 13:16:16-07 - - $
d68 2
a69 1
              leftchild.value = curr.value ;}}
d72 1
a72 1
   }return null;}
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.9 2014-05-12 13:15:21-07 - - $
d57 1
a57 1
              curr.
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.8 2014-05-12 13:13:17-07 - - $
d60 4
a63 4
              node rightchild = new node ();
              curr.right = rightchild;
              rightchild.key = ;
              rightchild.value = ;}
d65 4
a68 4
              node leftchild = new node();
              curr.left = leftchild;
              leftchild.key = ; 
              leftchild.value = ;}}
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.7 2014-05-12 12:57:20-07 - - $
d18 1
a18 1
      //try{
d28 3
a30 3
     /* }catch (error UnsupportedOperationException()){
         throw new UnsupportedOperationException(); */
   }
d38 1
a38 1
     // try{
d45 5
a49 5
        }return null;
        }   
     // }catch{}
     // throw new UnsupportedOperationException ();
   
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.6 2014-05-12 12:57:00-07 - - $
d52 19
a70 4
      node curr = root;
      while(curr != null){
         int tmp = curr.key.compareTo(key); 
      //throw new UnsupportedOperationException ();
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.5 2014-05-12 12:56:47-07 - - $
d56 1
a56 1
   }}
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.4 2014-05-12 12:56:00-07 - - $
d24 1
a24 1
                  tree = tree.toString(); 
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.3 2014-05-12 12:55:47-07 - - $
d24 1
a24 1
                  tree.key = tree.key.toString(); 
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.2 2014-05-12 12:55:16-07 - - $
d49 1
a49 1
   }
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.1 2014-05-12 11:09:14-07 - - $
d56 1
a56 1
   }
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.1 2014-01-16 17:44:47-08 - - $
d19 3
a21 2
          if (tree.value == null){return;}
              debug_dump_rec(tree, depth+3);
d23 3
a25 2
                  out.printf(" "); }
                  out.printf("%s %s", tree.value, tree.key);
d27 1
a27 1
              debug_dump_rec(tree, depth);} 
d38 11
a48 1
      throw new UnsupportedOperationException ();
d52 4
a55 1
      throw new UnsupportedOperationException ();
@
