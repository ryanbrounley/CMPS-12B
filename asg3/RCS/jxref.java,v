head	1.70;
access;
symbols;
locks;
comment	@# @;


1.70
date	2014.05.13.07.57.29;	author -;	state -;
branches;
next	1.69;

1.69
date	2014.05.13.07.56.59;	author -;	state -;
branches;
next	1.68;

1.68
date	2014.05.13.07.47.13;	author -;	state -;
branches;
next	1.67;

1.67
date	2014.05.13.07.46.00;	author -;	state -;
branches;
next	1.66;

1.66
date	2014.05.13.07.44.48;	author -;	state -;
branches;
next	1.65;

1.65
date	2014.05.13.07.43.22;	author -;	state -;
branches;
next	1.64;

1.64
date	2014.05.13.07.00.04;	author -;	state -;
branches;
next	1.63;

1.63
date	2014.05.13.06.56.37;	author -;	state -;
branches;
next	1.62;

1.62
date	2014.05.13.06.47.49;	author -;	state -;
branches;
next	1.61;

1.61
date	2014.05.13.06.41.57;	author -;	state -;
branches;
next	1.60;

1.60
date	2014.05.13.06.29.54;	author -;	state -;
branches;
next	1.59;

1.59
date	2014.05.13.06.29.22;	author -;	state -;
branches;
next	1.58;

1.58
date	2014.05.13.06.28.06;	author -;	state -;
branches;
next	1.57;

1.57
date	2014.05.13.06.19.51;	author -;	state -;
branches;
next	1.56;

1.56
date	2014.05.13.04.50.56;	author -;	state -;
branches;
next	1.55;

1.55
date	2014.05.13.04.41.59;	author -;	state -;
branches;
next	1.54;

1.54
date	2014.05.13.04.41.02;	author -;	state -;
branches;
next	1.53;

1.53
date	2014.05.13.04.40.41;	author -;	state -;
branches;
next	1.52;

1.52
date	2014.05.13.04.39.03;	author -;	state -;
branches;
next	1.51;

1.51
date	2014.05.13.04.38.14;	author -;	state -;
branches;
next	1.50;

1.50
date	2014.05.13.04.37.41;	author -;	state -;
branches;
next	1.49;

1.49
date	2014.05.13.04.03.58;	author -;	state -;
branches;
next	1.48;

1.48
date	2014.05.13.03.41.14;	author -;	state -;
branches;
next	1.47;

1.47
date	2014.05.13.03.40.35;	author -;	state -;
branches;
next	1.46;

1.46
date	2014.05.13.03.40.10;	author -;	state -;
branches;
next	1.45;

1.45
date	2014.05.13.02.15.31;	author -;	state -;
branches;
next	1.44;

1.44
date	2014.05.13.02.13.30;	author -;	state -;
branches;
next	1.43;

1.43
date	2014.05.13.02.13.19;	author -;	state -;
branches;
next	1.42;

1.42
date	2014.05.13.02.12.54;	author -;	state -;
branches;
next	1.41;

1.41
date	2014.05.13.02.05.05;	author -;	state -;
branches;
next	1.40;

1.40
date	2014.05.13.01.53.30;	author -;	state -;
branches;
next	1.39;

1.39
date	2014.05.13.01.53.14;	author -;	state -;
branches;
next	1.38;

1.38
date	2014.05.13.01.41.05;	author -;	state -;
branches;
next	1.37;

1.37
date	2014.05.12.21.19.37;	author -;	state -;
branches;
next	1.36;

1.36
date	2014.05.12.18.11.34;	author -;	state -;
branches;
next	1.35;

1.35
date	2014.05.12.18.11.19;	author -;	state -;
branches;
next	1.34;

1.34
date	2014.05.12.18.08.31;	author -;	state -;
branches;
next	1.33;

1.33
date	2014.05.09.21.00.02;	author -;	state -;
branches;
next	1.32;

1.32
date	2014.05.09.03.37.11;	author -;	state -;
branches;
next	1.31;

1.31
date	2014.05.09.03.36.48;	author -;	state -;
branches;
next	1.30;

1.30
date	2014.05.09.03.32.30;	author -;	state -;
branches;
next	1.29;

1.29
date	2014.05.09.03.32.07;	author -;	state -;
branches;
next	1.28;

1.28
date	2014.05.09.03.31.46;	author -;	state -;
branches;
next	1.27;

1.27
date	2014.05.09.03.31.12;	author -;	state -;
branches;
next	1.26;

1.26
date	2014.05.09.03.17.49;	author -;	state -;
branches;
next	1.25;

1.25
date	2014.05.09.03.16.17;	author -;	state -;
branches;
next	1.24;

1.24
date	2014.05.09.03.15.28;	author -;	state -;
branches;
next	1.23;

1.23
date	2014.05.09.03.15.05;	author -;	state -;
branches;
next	1.22;

1.22
date	2014.05.09.03.07.40;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.05.09.03.06.43;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.05.09.03.06.21;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.05.09.03.04.24;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.05.09.03.03.51;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.05.09.03.03.20;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.05.09.03.01.27;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.05.08.04.02.52;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.05.08.04.02.21;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.05.08.04.01.36;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.05.08.04.01.14;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.05.08.03.54.10;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.05.08.03.52.19;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.05.08.03.51.47;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.08.03.43.16;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.08.03.42.31;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.08.03.41.24;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.08.03.38.20;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.08.03.38.04;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.08.03.37.08;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.08.03.34.19;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.08.03.31.55;	author -;	state -;
branches;
next	;


desc
@@


1.70
log
@-
@
text
@// $Id: jxref.java,v 1.69 2014-05-13 00:56:59-07 - - $
// Ryan Brounley -- rbrounle

import java.io.*;
import java.util.Scanner;
import static java.lang.System.*;

class jxref{
   static final String STDIN_NAME = "-";
   static boolean caseChange = false;
   static boolean treeDump = false;

   static class printer implements visitor <String, queue <Integer>> {
      public void visit (String key, queue <Integer> value) {
         out.printf ("%s", key);
         for (int linenr: value) out.printf (" %d", linenr);
         out.printf ("%n");
      }
   }

   static void xref_file (String filename, Scanner scan) {
      treemap <String, queue <Integer>> map =
            new treemap <String, queue <Integer>> ();
      for (int linenr = 1; scan.hasNextLine (); ++linenr) {
         for (String word: scan.nextLine().split ("\\W+")) {
            if (word.matches ("^\\d*$")) continue;
            if (caseChange == true){
                word = word.toLowerCase();
            }
            queue <Integer> tqueue;
            tqueue = map.get(word);
            if (tqueue == null){
                 queue <Integer> newqueue = new queue<Integer>();
                 newqueue.insert(linenr);
                 map.put(word, newqueue);
           }else {
                 tqueue.insert(linenr);
          }
        }
      }
      if (treeDump == true){
          map.debug_dump();
      }else {
      visitor <String, queue <Integer>> print_fn = new printer ();
      map.do_visit (print_fn);
   }
}
   public static void main (String[] args) {
      if (args.length == 0) {
         xref_file (STDIN_NAME, new Scanner (in));
      }else {
         for (int argi = 0; argi < args.length; ++argi) {
            String filename = args[argi];
            if (filename.startsWith(STDIN_NAME) == false){
            for( int i = 0; i < 65; ++i) out.printf("%s",":");
            out.printf("%n%s%n", filename);
            for(int i = 0 ; i < 65; ++i) out.printf("%s", ":");
            out.printf("%n");}
            if (filename.startsWith(STDIN_NAME)) {
               char[] optionsarray = filename.toCharArray();
               if(optionsarray[1] == 'd' || optionsarray[1] == 'f'){
                    if(optionsarray.length >= 3 && (optionsarray[2] =='f' ||
                    optionsarray[2] == 'd')){
                    treeDump = true;
                    caseChange = true;
                    }
                    else if (optionsarray.length >= 3 && (optionsarray[2] != 'f' ||
                    optionsarray[2] != 'd')){
                    out.printf("Invalid Entry!");}
                    else if (optionsarray.length == 2){
                         if(optionsarray[1] == 'd'){
                             treeDump = true;}
                         else if (optionsarray [1] == 'f'){
                             caseChange = true;}}
               }else{
                    out.printf("Invalid Entry!\n");
                    xref_file(STDIN_NAME, new Scanner (in));}
            }else {
               try {
                  Scanner scan = new Scanner (new File (filename));
                  xref_file (filename, scan);
                  scan.close ();
               }catch (IOException error) {
                  auxlib.warn (error.getMessage ());
               }
            }
         }
      }
      auxlib.exit ();
   }
}

@


1.69
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.68 2014-05-13 00:47:13-07 - - $
d76 2
a77 2
                    out.printf("Invalid Entry!\n");}
                    xref_file(STDIN_NAME, new Scanner (in));
@


1.68
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.67 2014-05-13 00:46:00-07 - - $
d15 1
a15 1
         out.printf ("%s %s", key, value);
a45 1
      out.printf("DEBUG");
d77 1
a77 1
                    //xref_file(STDIN_NAME, new Scanner (in));
@


1.67
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.66 2014-05-13 00:44:48-07 - - $
d45 1
a46 1
      map.do_visit (print_fn);
@


1.66
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.65 2014-05-13 00:43:22-07 - - $
a29 1
            out.printf("DEBUG");
d45 1
@


1.65
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.64 2014-05-13 00:00:04-07 - - $
d30 1
a37 1
                 out.printf("DEBUG");
@


1.64
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.63 2014-05-12 23:56:37-07 - - $
d37 1
a37 2
                // int i = tqueue.remove();
                // tqueue.insert(i);
@


1.63
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.62 2014-05-12 23:47:49-07 - - $
d56 1
a56 1
            if (filename.startsWith(STDIN_NAME) = false){
@


1.62
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.61 2014-05-12 23:41:57-07 - - $
d56 1
d60 1
a60 1
            out.printf("%n");
@


1.61
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.60 2014-05-12 23:29:54-07 - - $
d37 2
a38 2
                 int i = tqueue.remove();
                 tqueue.insert(i);
@


1.60
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.59 2014-05-12 23:29:22-07 - - $
d37 2
@


1.59
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.58 2014-05-12 23:28:06-07 - - $
d27 1
a27 1
            if (caseChange = true){
@


1.58
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.56 2014-05-12 21:50:56-07 - - $
a31 1
            out.printf ("%d: %s%n", linenr, word);
@


1.57
log
@-
@
text
@d32 1
d55 4
@


1.56
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.55 2014-05-12 21:41:59-07 - - $
a31 1
            out.printf ("%d: %s%n", linenr, word);
@


1.55
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.54 2014-05-12 21:41:02-07 - - $
d27 1
a27 1
            if (caseChange){
@


1.54
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.53 2014-05-12 21:40:41-07 - - $
d32 1
a32 1
            out.printf ("%s: %d: %s%n", linenr, word);
@


1.53
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.52 2014-05-12 21:39:03-07 - - $
d32 1
a32 1
            out.printf ("%s: %d: %s%n", filename, linenr, word);
@


1.52
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.51 2014-05-12 21:38:14-07 - - $
d32 1
@


1.51
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.50 2014-05-12 21:37:41-07 - - $
a23 1
      out.printf("%s, %s", caseChange, treeDump);
d28 2
a29 1
                word = word.toLowerCase(); }
@


1.50
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.49 2014-05-12 21:03:58-07 - - $
d24 1
a24 1
      out.printf("%s", caseChange);
@


1.49
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.48 2014-05-12 20:41:14-07 - - $
d24 1
@


1.48
log
@-
@
text
@d1 2
a2 1
// $Id: jxref.java,v 1.47 2014-05-12 20:40:35-07 - - $
@


1.47
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.46 2014-05-12 20:40:10-07 - - $
d70 1
a70 1
                    xref_file(STDIN_NAME, new Scanner (in));
@


1.46
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.45 2014-05-12 19:15:31-07 - - $
d70 1
a70 1
                    xref_file(STDIN_NAME, scan);
@


1.45
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.44 2014-05-12 19:13:30-07 - - $
d70 1
a70 1
               // xref_file(STDIN, in);
@


1.44
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.43 2014-05-12 19:13:19-07 - - $
d36 2
a37 2
           }
         }
a83 1

@


1.43
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.42 2014-05-12 19:12:54-07 - - $
d31 1
a31 1
                 queue <Interger> newqueue = new queue<Integer>();
@


1.42
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.41 2014-05-12 19:05:05-07 - - $
d31 1
a31 1
                 queue <INterger> newqueue = new queue<Integer>();
d39 1
a39 1
      if (treedump == true){
@


1.41
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.40 2014-05-12 18:53:30-07 - - $
d28 9
a36 5
            else if (treeDump){
                treemap.debug_dump();}
            else{
                treemap.do_visit(visit_fn);}
            out.printf ("%s: %d: %s%n", filename, linenr, word);
d39 3
d45 1
a45 1

@


1.40
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.39 2014-05-12 18:53:14-07 - - $
d28 4
a31 4
           // else if (treeDump){
                //treemap.debug_dump();}
           // else{
               // treemap.do_visit(visit_fn);}
@


1.39
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.38 2014-05-12 18:41:05-07 - - $
d28 1
a28 1
            else if (treeDump){
d30 1
a30 1
            else{
@


1.38
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.37 2014-05-12 14:19:37-07 - - $
d29 1
a29 1
                treemap.debug_dump();}
d31 1
a31 1
                treemap.do_visit(visit_fn);}
@


1.37
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.36 2014-05-12 11:11:34-07 - - $
d31 1
a31 1
                treemap.do_visit();}
@


1.36
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.35 2014-05-12 11:11:19-07 - - $
d26 1
a26 1
            else if (caseChange){
d28 4
a31 1
            treemap.debug_dump();
d52 1
a52 1
                    out.printf("You've got two options!");}
d55 1
a55 1
                    out.printf("Invalid Entry!\n");}
d60 1
a60 2
                             caseChange = true;}
                    out.printf("You've got an option!\n");}
d63 1
a63 1
               xref_file (STDIN_NAME, new Scanner (in));
@


1.35
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.34 2014-05-12 11:08:31-07 - - $
d28 1
a28 1
            treemap.debug_dump_rec(word, 0);
@


1.34
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.33 2014-05-09 14:00:02-07 - - $
d28 1
a28 1
            //treemap.debug_dump_rec(word, 0);
@


1.33
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.32 2014-05-08 20:37:11-07 - - $
d28 1
a28 1
            treemap.debug_dump_rec(word, 0);
@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.31 2014-05-08 20:36:48-07 - - $
d7 1
a7 1
class jxref {
d28 1
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.30 2014-05-08 20:32:30-07 - - $
d27 1
a27 1
                word = word.toLowerCase; }
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.29 2014-05-08 20:32:07-07 - - $
d26 2
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.28 2014-05-08 20:31:46-07 - - $
d53 1
a53 1
                         else if (optionarray [1] == 'f'){
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.27 2014-05-08 20:31:12-07 - - $
d9 2
a10 2
   boolean caseChange = false;
   boolean treeDump = false;
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.26 2014-05-08 20:17:49-07 - - $
d9 2
a10 2
   boolean caseChange == false;
   boolean treeDump == false;
d44 2
a45 2
                    treeDump == true;
                    caseChange == true;
d52 1
a52 1
                             treeDump == true;}
d54 1
a54 1
                             caseChange == true;}
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.25 2014-05-08 20:16:17-07 - - $
d9 2
a41 1
                    //out.printf("%s, %s\n", optionsarray.length, optionsarray[2]);
d44 2
d51 4
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.24 2014-05-08 20:15:28-07 - - $
d40 3
a42 3
                    out.printf("%s, %s\n", optionsarray.length, optionsarray[2]);
                    if(optionsarray.length >= 3 && optionsarray[2] =='f' ||
                    optionsarray[2] == 'd'){
d44 2
a45 2
                    else if (optionsarray.length >= 3 && optionsarray[2] != 'f' ||
                    optionsarray[2] != 'd'){
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.23 2014-05-08 20:15:05-07 - - $
d40 1
a40 1
                    out.printf("%s", optionsarray.length);
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.22 2014-05-08 20:07:40-07 - - $
d40 1
a40 1
                    out.printf("%i", optionsarray.length);
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.21 2014-05-08 20:06:43-07 - - $
d40 1
d50 1
a50 1
                    out.printf("You've got nothin!\n");}
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.20 2014-05-08 20:06:21-07 - - $
d46 1
a46 1
                    else{
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.19 2014-05-08 20:04:24-07 - - $
d40 1
a40 1
                    if(optionsarray.length() >= 3 && optionsarray[2] =='f' ||
d43 1
a43 1
                    else if (optionsarray.length() >= 3 && optionsarray[2] != 'f' ||
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.18 2014-05-08 20:03:51-07 - - $
d40 2
a41 2
                    if(optionsarray.length >= 3 && optionsarray[3] =='f' ||
                    optionsarray[1] == 'd'){
d43 2
a44 2
                    else if (optionsarray.length >= 3 && optionsarray[3] != 'f' ||
                    optionsarray[1] != 'd'){
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.17 2014-05-08 20:03:20-07 - - $
d40 1
a40 1
                    if(optionsarray.length >= 3 && optionsarray[2] =='f' ||
d43 1
a43 1
                    else if (optionsarray.length >= 3 && optionsarray[2] != 'f' ||
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.16 2014-05-08 20:01:27-07 - - $
d40 1
a40 1
                    if(optionsarray.length >= 3 && optionsarray[1] =='f' ||
d43 1
a43 1
                    else if (optionsarray.length >= 3 && optionsarray[1] != 'f' ||
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.15 2014-05-07 21:02:52-07 - - $
d40 2
a41 2
                    if(optionsarray.length >= 3 && optionsarray[2] =='f' ||
                    optionsarray[2] == 'd'){
d43 2
a44 2
                    else if (optionsarray.length >= 3 && optionsarray[2] != 'f' ||
                    optionsarray[2] != 'd'){
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.14 2014-05-07 21:02:21-07 - - $
d40 1
a40 1
                    if(optionsarray.length >= 2 && optionsarray[2] =='f' ||
d43 1
a43 1
                    else if (optionsarray.length >= 2 && optionsarray[2] != 'f' ||
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.13 2014-05-07 21:01:36-07 - - $
d40 1
a40 1
                    if(optionsarray.length > 2 && optionsarray[2] =='f' ||
d43 1
a43 1
                    else if (optionsarray.length > 2 && optionsarray[2] != 'f' ||
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.12 2014-05-07 21:01:14-07 - - $
d37 1
a37 1
            if (filename.startsWith(STDIN_NAME) && filename.equals (args[0])) {
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.11 2014-05-07 20:54:10-07 - - $
d41 1
a41 1
                    optionarray[2] == 'd'){
d43 1
a43 1
                    else if (optionsarray.length > 2 && optionarray[2] != 'f' ||
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.10 2014-05-07 20:52:19-07 - - $
d38 4
a41 3
               if(filename.charAt(1) == 'd' || filename.charAt(1) == 'f'){
                    if(filename.length() > 1 && filename.charAt(2) =='f' ||
                    filename.charAt(2) == 'd'){
d43 2
a44 2
                    else if (filename.length() > 2 && filename.charAt(2) != 'f' ||
                    filename.charAt(2) != 'd'){
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.9 2014-05-07 20:51:47-07 - - $
d39 1
a39 1
                    if(filename.length() > 2 && filename.charAt(2) =='f' ||
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.8 2014-05-07 20:43:16-07 - - $
d44 1
a44 1
                    out.printf("Invalid Entry!\n");
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.7 2014-05-07 20:42:31-07 - - $
d39 2
a40 1
                    if(filename.length() > 2){
d42 3
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.6 2014-05-07 20:41:24-07 - - $
d39 1
a39 1
                    if(filename.length > 2){
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.5 2014-05-07 20:38:20-07 - - $
d39 1
a39 1
                    if(filename.charAt(2) != ' '){
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.4 2014-05-07 20:38:04-07 - - $
d39 2
a40 2
                    if(filename.charAt(2) != null){
                    out.printf("You've got two options");}
d43 1
a43 2
                   }
               else{
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.3 2014-05-07 20:37:08-07 - - $
d40 1
a40 1
                    out.printf("You've got two options")}
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.2 2014-05-07 20:34:19-07 - - $
a37 2
               char options1 = filename.charAt(1);
               char options2 = filename.charAt(2);
d42 2
a43 1
                    out.printf("You've got an option!\n");}}
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.1 2014-05-07 20:31:55-07 - - $
d40 5
a44 4
               if(options1 == 'd' || options1 == 'f'){
                   // if(options2 != null){}
                   // else{}
                    out.printf("%c\n", options2);}
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.1 2014-01-16 17:44:47-08 - - $
d43 1
a43 1
                    out.printf("You've got an option!\n");}
@
